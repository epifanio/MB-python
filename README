MB utilities in python
Author: Kelsey Jordahl <kjordahl@alum.mit.edu>
Time-stamp: <Sat Dec  4 13:40:16 EST 2010>

This is an ALPHA version of MB utilities in python.  These utilities
are written in Python to interact with multibeam bathymetry data and
metadata used with 
MB-System <http://www.ldeo.columbia.edu/res/pi/MB-System> by David
W. Caress and Dale N. Chayes.  Use of this program is only recommended
at the present time for those very familiar with both MB-System
and PostGIS.  Please see security WARNING below!

Currently, only the program mbnav2sql.py is in a functional state.
This program is intended to add files from an MB datalist (which may
be recursive, containing other datalists) to a PostGIS database in
order to complement the capabilities of MB-System programs such as
mbdatalist.  This allows the powerful spatial queries in PostGIS to
apply to multibeam navigation.  For example, one might query to get a
list of files within 50 km of the coast of the island of Oahu.  It
also allows browsing of navigation files with a GIS program that can
interact with a PostGIS database.  I have tested with Qgis, which
works well (but can be slow for many large navigation files).

There is currently limited functionality, but testing has included
added over 26,000 files to a PostGIS database.  Please let me know if
you find this program useful, if you find bugs or have suggestions.

The PostGIS database column structure is as follows (though still
subject to change):
  file_id SERIAL PRIMARY KEY,
  filename VARCHAR(100),
  directory VARCHAR(200),
  mbformat INT,
  start_time TIMESTAMP,
  end_time TIMESTAMP,
  records INT,
  cruise_id VARCHAR(30),
  track GEOGRAPHY
  the_geom GEOMETRY

Use "mbnav2sql.py -h" for help and command line options.

See the EXAMPLES file for some usage possibilities.

WARNING:

Although some checking is done on input, PostgreSQL communication is
currently not done in an entirely secure manner.  DO NOT USE with a
production database or with any important data unless you are SURE
exactly what you are doing.  For more information on the potential
dangers of SQL injection attacks, please see <http://xkcd.com/327>.

TODO: 

- Improve security of SQL cursor commands
- Better error checking
- Qgis 1.5 doesn't recognize GEOGRAPHY columns, and doesn't seem to
  like GEOMETRY columns that contain multibple datatypes.  Qgis 1.6,
  in my initial testing, couldn't read any columns at all (as of 2 Dec
  2010).  Database structure more friendly for common tools would be good.
- Represent actual data coverage (full swath) in addition to trackline
- Tools for accessing multibeam data in the database.  Currently the
  only way to interact with the database is directly through SQL
  commands.
- Link cruiseid to metadata for each cruise, ideally with automatic retrieval of
  metadata from archives such as
  http://www.marine-geo.org/tools/web_services.php
   or
  http://www.ngdc.noaa.gov/metadata/published/NGDC_-_MGG_-_Multibeam_Survey/list
   or
  Rolling Deck to Repository <http://www.rvdata.us>
- and plenty more....

These programs are released under the Gnu Public License (version 3).
They are free to use, imply no warantee whatsoever, and may be
redistributed under the terms of the GPLv3.  Please see the file
COPYING or <http://www.gnu.org/licenses> for details.

REQUIREMENTS:

python2.7 (may work on previous 2.x versions, but untested)
psycopg2 <http://initd.org/psycopg> for calling postgreSQL from within Python
MB-System (probably version 5.1 or greater)
PostgreSQL installed and running <http://www.postgresql.org>
PostGIS enabled <http://postgis.refractions.net>
(optional) PostGIS-enabled GIS program such as Qgis <http://www.qgis.org>

Files:
mb.py	       Python module containing objects representing MB data structures
mbnav2sql.py   load MB .fnv files from datalist and load into PostGIS database
